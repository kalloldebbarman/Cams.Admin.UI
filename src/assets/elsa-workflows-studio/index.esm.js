import{S as i}from"./p-f3f2f442.js";export{A as ActivityTraits,O as OrderBy,S as SyntaxNames,W as WorkflowContextFidelity,a as WorkflowPersistenceBehavior,b as WorkflowStatus,c as WorkflowTestActivityMessageStatus,g as getVersionOptionsString}from"./p-f3f2f442.js";import{E as o}from"./p-ec6778d3.js";export{E as EventTypes}from"./p-ec6778d3.js";export{A as ActivityIconProvider,a as activityIconProvider}from"./p-d89b071e.js";export{C as ConfirmDialogService,c as confirmDialogService}from"./p-9d0a1097.js";export{T as ToastNotificationService,t as toastNotificationService}from"./p-9c800894.js";import{c as r}from"./p-6cc453a9.js";export{a as createElsaClient,c as createHttpClient}from"./p-6cc453a9.js";import{e as n}from"./p-d17a08e5.js";export{e as eventBus}from"./p-d17a08e5.js";export{F as FeaturesDataManager,f as featuresDataManager}from"./p-f4e44994.js";export{P as PluginManager,p as pluginManager}from"./p-faf758b2.js";export{P as PropertyDisplayManager,p as propertyDisplayManager}from"./p-32ba7510.js";import"./p-f1ec68ec.js";import"./p-a3b5bd35.js";import{h as l}from"./p-6f3ac5fa.js";import"./p-82db2ff5.js";import"./p-949334ec.js";import{P as m}from"./p-88678d9c.js";export{s as DashboardState}from"./p-bc995f78.js";export{d as DashboardTunnel}from"./p-96c5f56a.js";import"./p-ee0b9025.js";import"./p-80de33dc.js";import"./p-83f217d4.js";class h{constructor(){n.on(o.ActivityDesignDisplaying,this.onActivityDisplaying),n.on(o.Dashboard.Appearing,this.onLoadingMenu)}onActivityDisplaying(t){const a=t.activityModel;if(!a.type.endsWith("Webhook"))return;const s=(a.properties||[]).find((t=>"Path"==t.name))||{name:"Path",expressions:{Literal:"",syntax:i.Literal}},e=l(s.expressions[s.syntax||i.Literal]);t.bodyDisplay=`<p>${e}</p>`}onLoadingMenu(t){t.data.menuItems=[...t.data.menuItems,["webhook-definitions","Webhook Definitions"]],t.data.routes=[...t.data.routes,["webhook-definitions","elsa-studio-webhook-definitions-list",!0],["webhook-definitions/:id","elsa-studio-webhook-definitions-edit",!1]]}}let w=null;class u{constructor(t){this.serverUrl=t.serverUrl,n.on(o.WorkflowRegistryLoadingColumns,this.onLoadingColumns),n.on(o.WorkflowRegistryUpdating,this.onUpdating)}onLoadingColumns(t){t.data={headers:[["Enabled"]],hasContextItems:!0}}async onUpdating(t){const a=await async function(t){if(w)return w;const a=await r(t);return w={workflowSettingsApi:{list:async()=>(await a.get("v1/workflow-settings")).data,save:async t=>(await a.post("v1/workflow-settings",t)).data,delete:async t=>{await a.delete(`v1/workflow-settings/${t}`)}}},w}(this.serverUrl),s=(await a.workflowSettingsApi.list()).find((a=>a.workflowBlueprintId==t.params[0]&&a.key==t.params[1]));null!=s&&await a.workflowSettingsApi.delete(s.id);const i={workflowBlueprintId:t.params[0],key:t.params[1],value:t.params[2]};await a.workflowSettingsApi.save(i),await n.emit(o.WorkflowRegistryUpdated,this)}}class y{constructor(t){this.initialize=async()=>{const t=this.options,{domain:a}=t;if(!a||0==a.trim().length)return;if(this.auth0=await m(t),await this.auth0.isAuthenticated())return;if(window.location.search.includes("code="))try{return await this.auth0.handleRedirectCallback(),void window.history.replaceState({},document.title,"/")}catch(t){return void console.log("Error parsing redirect:",t)}const s={redirect_uri:window.location.origin};await this.auth0.loginWithRedirect(s)},this.configureAuthMiddleware=async t=>{const a=this.auth0;t.service.register({async onRequest(t){const s=await a.getTokenSilently();return s&&(t.headers=Object.assign(Object.assign({},t.headers),{Authorization:`Bearer ${s}`})),t}})},this.options=t,n.on(o.Root.Initializing,this.initialize),n.on(o.HttpClientCreated,this.configureAuthMiddleware)}}class j{constructor(){n.on(o.ActivityDesignDisplaying,this.onActivityDisplaying),n.on(o.Dashboard.Appearing,this.onLoadingMenu)}onActivityDisplaying(t){const a=t.activityModel;if(!a.type.endsWith("Manager"))return;const s=(a.properties||[]).find((t=>"Path"==t.name))||{name:"Path",expressions:{Literal:"",syntax:i.Literal}},e=l(s.expressions[s.syntax||i.Literal]);t.bodyDisplay=`<p>${e}</p>`}onLoadingMenu(t){t.data.menuItems=[...t.data.menuItems,["credential-manager","Credential Manager"]],t.data.routes=[...t.data.routes,["credential-manager","elsa-credential-manager-items-list",!0]]}}export{y as Auth0Plugin,j as CredentialManagerPlugin,h as WebhooksPlugin,u as WorkflowSettingsPlugin}